#! /usr/bin/env python2
from __future__ import print_function

import os
from os.path import basename
from os.path import isabs
from lib import transplant
from linux_modules import (MODULE_DIR, gzopen)

# This is based on "modinfo" from "module-init-tools" (apparently GPL 2)

def main(*modules, **kw):
    kernel = kw.pop("k")
    basedir = kw.pop("b")
    kw.pop("0")
    if kw:
        raise TypeError("Unexpected keyword arguments: {0}".format(
            ", ".join(kw.keys())))
    
    for name in modules:
        if "." not in name and "/" not in name:
            moddir = os.path.join(basedir, MODULE_DIR, kernel)
            (file, raw) = gzopen(os.path.join(moddir, "modules.dep"))
            with raw:
                for line in file:
                    line = line.strip()
                    if line.startswith("#"):
                        continue
                    try:
                        (filename, deps) = line.split(":", 1)
                    except ValueError:
                        continue
                    candidate = basename(filename)
                    
                    if candidate.find(".") != len(name):
                        continue
                    for (i, c) in enumerate(name):
                        if c == ":":
                            continue
                        cc = candidate[i]
                        if c == cc:
                            continue
                        if c in "_-" and cc in "_-":
                            continue
                        break
                    else:
                        break
                else:
                    raise SystemExit(
                        "modinfo: could not find module {0}".format(name))
            
            if isabs(filename):
                name = transplant(filename, new=basedir)
            else:
                name = os.path.join(moddir, filename)
main.arg_opts = ("b", "k")

from lib import run_main
run_main(__name__)
