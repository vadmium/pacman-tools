#! /usr/bin/env python2
from __future__ import print_function

import os
from os.path import basename
from os.path import isabs
from lib import transplant
from linux_modules import (MODULE_DIR, gzopen, open_elf)
from sys import stderr
from lib import Record

# This is based on "modinfo" from "module-init-tools" (apparently GPL 2)

def main(*modules, **kw):
    kernel = kw.pop("k")
    basedir = kw.pop("b")
    sep = "\x00" if kw.pop("0", False) else "\n"
    if kw:
        raise TypeError("Unexpected keyword arguments: {}".format(
            ", ".join(kw.keys())))
    
    for name in modules:
        if "." not in name and "/" not in name:
            moddir = os.path.join(basedir, MODULE_DIR, kernel)
            (file, raw) = gzopen(os.path.join(moddir, "modules.dep"))
            with raw:
                for line in file:
                    line = line.strip()
                    if line.startswith(b"#"):
                        continue
                    try:
                        (filename, deps) = line.split(b":", 1)
                    except ValueError:
                        continue
                    filename = os.fsdecode(filename)
                    candidate = basename(filename)
                    
                    if candidate.find(".") != len(name):
                        continue
                    for (i, c) in enumerate(name):
                        if c == ":":
                            continue
                        cc = candidate[i]
                        if c == cc:
                            continue
                        if c in "_-" and cc in "_-":
                            continue
                        break
                    else:
                        break
                else:
                    msg = "modinfo: could not find module {}".format(name)
                    raise SystemExit(msg)
            
            if isabs(filename):
                name = transplant(filename, new=basedir)
            else:
                name = os.path.join(moddir, filename)
        
        params = list()
        param_indexes = dict()
        with open_elf(name) as module:
            for (i, info) in enumerate(module.get_strings(b".modinfo")):
                if not i:
                    print("{:16}{}".format("filename:", name), end=sep)
                
                info = os.fsdecode(info)
                PARAM_TAGS = ("parm", "parmtype")
                for tag in PARAM_TAGS:
                    if not info.startswith(tag + "="):
                        continue
                    param = info[len(tag) + 1:]
                    (param_name, param_info) = param.split(":", 1)
                    
                    try:
                        i = param_indexes[param_name]
                    except LookupError:
                        i = len(params)
                        param_indexes[param_name] = i
                        param = dict.fromkeys(PARAM_TAGS)
                        params.append(Record(param, name=param_name))
                    setattr(params[i], tag, param_info)
                    break
                
                else:
                    if sep == "\x00":
                        print(info, end=sep)
                        continue
                    
                    try:
                        (tag, eq) = info.split("=", 1)
                    except ValueError:
                        msg = '{}: Missing "=" separator in ".modinfo" tag'
                        print(msg.format(name), file=stderr)
                        continue
                    
                    print("{:16}{}".format(tag + ":", eq), end=sep)
            
            for param in params:
                if param.parm is None:
                    info = param.parmtype
                elif param.parmtype is None:
                    info = param.parm
                else:
                    info = "{parm} ({parmtype})".format_map(vars(param))
                line = "{:16}{}:{}".format("parm:", param.name, info)
                print(line, end=sep)
main.arg_opts = ("b", "k")

from lib import run_main
run_main(__name__)
