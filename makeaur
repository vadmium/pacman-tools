#! /usr/bin/env python3

import subprocess
from io import StringIO, BytesIO, BufferedIOBase
from os import fsencode
from contextlib import contextmanager, ExitStack
import selectors
from select import PIPE_BUF
from shutil import copyfileobj
from hashlib import sha256

"""
# Signature #

A description of the file tree is generated in the "mtree" format, and signed
with PGP. Each file entry should include the following keyword fields:

* type=file/dir/link
* sha256digest=[Only for type=file]
* mode=644/755 [Only for type=file; bits other than u=x are ignored]
* link=[Only for type=link]

To generate the "mtree" file and signature, commands like the following could
be used in many cases, using "libarchive" and Gnu Privacy Guard:

$ git ls-files |
> bsdtar -c --files-from /dev/stdin --no-recursion \
>     --exclude mtree --exclude mtree.sig \
>     --format mtree --file mtree --options '!all,type,sha256,mode,link'
$ gpg --detach-sign mtree

The "mtree" file should include the following two entries, to make it easier
to verify:

mtree ignore optional
mtree.sig ignore optional

When verifying the "mtree" data, files that are missing from the "mtree" data
(other than "mtree" and "mtree.sig" themselves) should trigger a verification
failure. Depending on the "mtree" format, file system, etc, commands like the
following could be used:

$ gpg --verify mtree.sig
$ mtree < mtree

Multiple signatures can be appended with commands like:

$ gpg --detach-sign < mtree >> mtree.sig
"""

def main(p="PKGBUILD"):
    proc = getaurinfo(p)
    (aurinfo, _) = proc.communicate()
    if proc.returncode:
        raise SystemExit(proc.returncode)
    metadata = parseaurinfo(aurinfo)
    package = PackageSource()
    with package.context():
        package.addfile(".SRCINFO", BytesIO(aurinfo))
        package.addosfile(p, "PKGBUILD")
        for field in FILE_FIELDS:
            file = metadata.get(field)
            if file:
                package.addosfile(file)
        for source in metadata["source"]:
            if b":" not in source:
                package.addosfile(source)

class PackageSource:
    @contextmanager
    def context(self):
        with ExitStack() as cleanup:
            mtree_save = open("mtree", "wb")
            mtree_save = cleanup.enter_context(mtree_save)
            gpg = ("gpg", "--detach-sign")
            with open("mtree.sig", "wb") as sig:
                gpg = cleanup.enter_context(subprocess.Popen(gpg,
                    stdin=subprocess.PIPE, bufsize=-1, stdout=sig))
            mtree_sign = gpg.stdin
            self.mtree = Writer(mtree_save.write, mtree_sign.write)
            
            self.mtree.write(
                # Relative path format more compatible with "mtree" command
                b"#mtree v1.0\n"
                b". type=dir\n"
                b"mtree ignore optional\n"
                b"mtree.sig ignore optional\n"
                b"/set type=file mode=644\n"
            )
            yield
            self.mtree.write(b"..\n")
    
    def addfile(self, name, fileobj):
        with open(name, "wb") as out:
            self.add_fileobj(name, fileobj, out.write)
    
    def addosfile(self, name, target=None):
        if not target:
            target = name
        with open(name, "rb") as file:
            self.add_fileobj(name, file)
    
    def add_fileobj(self, name, fileobj, *write):
        self.mtree.write(fsencode(name))
        hash = sha256()
        write += (hash.update,)
        copyfileobj(fileobj, Writer(*write))
        # Lowercase more compatible with "mtree" command
        line = " sha256digest={}\n".format(hash.hexdigest().lower())
        self.mtree.write(line.encode("ascii"))

def parseaurinfo(aurinfo):
    parsed = dict((field, list()) for field in ARRAY_FIELDS)
    parsed["pkgname"] = list()
    for line in aurinfo.splitlines():
        if not line:
            continue
        line = line.lstrip()
        (name, value) = line.split(b" = ", 1)
        name = name.decode("ascii", "replace")
        if name in SINGLE_FIELDS or name == "pkgbase":
            parsed.setdefault(name, value)
        if name in ARRAY_FIELDS or name == "pkgname":
            parsed[name].append(value)
    return parsed

def getaurinfo(pkgbuild):
    script = StringIO()
    script.write(r"""\
        set -o errexit -o nounset
        . "$1"
        
        # AUR 3.2.0 gives the infamous "only lowercase letters are allowed"
        # error if the "pkgbase" entry is omitted
        if test -v pkgbase -o -v pkgname; then
            printf 'pkgbase = %s\n' "${pkgbase-${pkgname[0]}}"
        fi
    """)
    script.write(r"""\
        for name in {} {}; do
    """.format(" ".join(SINGLE_FIELDS), " ".join(ARRAY_FIELDS)))
    script.write(r"""\
            if test -v "$name"; then
                array="$name[@]"
                printf "\t$name"' = %s\n' "${!array}"
            fi
        done
        
        printf '\n'
        if test -v pkgname; then
            printf 'pkgname = %s\n' "${pkgname[@]}"
        fi
    """)
    
    script = script.getvalue()
    proc = ("bash", "-c", script, "--", pkgbuild)
    return subprocess.Popen(proc, stdin=subprocess.DEVNULL,
        stdout=subprocess.PIPE)

FILE_FIELDS = ("install", "changelog")  # Used internally, but not by AUR
SINGLE_FIELDS = (
    "epoch", "pkgver", "pkgrel", "pkgdesc", "url",
) + FILE_FIELDS
ARRAY_FIELDS = (
    "license", "groups",
    "depends", "makedepends", "checkdepends", "optdepends",
    "conflicts", "provides", "replaces", "source",
)

class SubprocessWriter(BufferedIOBase):
    def __init__(self, *pos, stdout_writer, **kw):
        self.pos = pos
        self.kw = kw
        self.out_writer = stdout_writer
    
    @contextmanager
    def context(self):
        with subprocess.Popen(*self.pos,
        stdin=subprocess.PIPE, stdout=subprocess.PIPE, bufsize=0,
        **self.kw) as proc, \
        selectors.DefaultSelector() as self.selector:
            self.selector.register(proc.stdout, selectors.EVENT_READ,
                self.read_output)
            self.selector.register(proc.stdin, selectors.EVENT_WRITE,
                self.write_input)
            yield
            self.selector.unregister(proc.stdin)
            proc.stdin.close()
            while self.selector.get_map():
                for [key, _] in self.selector.select():
                    key.data(key.fileobj)
        if proc.returncode:
            raise SystemExit(proc.returncode)
    
    def write(self, b):
        self.b = memoryview(b)
        while self.b:
            for [key, _] in self.selector.select():
                key.data(key.fileobj)
    
    def write_input(self, pipe):
        # TODO: use non-blocking writes to avoid unnecessary chunking
        done = pipe.write(self.b[:PIPE_BUF])
        self.b = self.b[done:]
    
    def read_output(self, pipe):
        data = pipe.read(0x10000)
        if not data:
            self.selector.unregister(pipe)
            return
        self.out_writer.write(data)

class Writer(BufferedIOBase):
    def __init__(self, *write):
        self.writes = write
    def write(self, b):
        for write in self.writes:
            write(b)

if __name__ == "__main__":
    main()
