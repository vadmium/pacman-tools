#! /usr/bin/env python3

import subprocess
from io import StringIO, BytesIO, TextIOWrapper, IOBase
import tarfile
from time import time
from os import fsdecode
from stat import S_IRUSR, S_IWUSR, S_IXUSR
from stat import S_IRGRP, S_IXGRP, S_IROTH, S_IXOTH
from hashlib import sha256

def main(p="PKGBUILD"):
    proc = getaurinfo(p)
    (aurinfo, _) = proc.communicate()
    if proc.returncode:
        raise SystemExit(proc.returncode)
    pkg = parseaurinfo(aurinfo)
    with AurTar(pkg["pkgname"], pkg["pkgver"]) as aurtar:
        aurtar.addfile(".AURINFO", BytesIO(aurinfo), size=len(aurinfo))
        aurtar.addosfile(p, "PKGBUILD")
        for field in FILE_FIELDS:
            file = pkg.get(field)
            if file:
                aurtar.addosfile(file)
        for source in pkg["source"]:
            if b":" not in source:
                aurtar.addosfile(source)

class AurTar:
    def __init__(self, pkgname, pkgver):
        self.pkgname = fsdecode(pkgname)
        name = "{}-{}.src.tar.gz".format(self.pkgname, fsdecode(pkgver))
        self.tar = tarfile.open(name, "w:gz")
        self.mtime = time()
        self.sums = TextIOWrapper(BytesIO())
        
        tarinfo = tarfile.TarInfo(self.pkgname)
        tarinfo.mtime = self.mtime
        tarinfo.type = tarfile.DIRTYPE
        tarinfo.mode = (S_IRUSR | S_IWUSR | S_IXUSR |
            S_IRGRP | S_IXGRP |  S_IROTH | S_IXOTH)
        self.tar.addfile(tarinfo)
    
    def __enter__(self):
        self.tar.__enter__()
        return self
    
    def __exit__(self, type, exc, tb):
        if not exc:
            name = "{}/SHA256SUMS.asc".format(self.pkgname)
            tarinfo = tarfile.TarInfo(name)
            tarinfo.mtime = self.mtime
            
            # TODO: Need to also sign file attributes (file modes)
            with subprocess.Popen(("gpg", "--clearsign"),
            stdin=subprocess.PIPE, stdout=subprocess.PIPE) as gpg:
                (sig, _) = gpg.communicate(self.sums.detach().getvalue())
            tarinfo.size = len(sig)
            self.tar.addfile(tarinfo, BytesIO(sig))
        
        return self.tar.__exit__(type, exc, tb)
    
    def addfile(self, name, fileobj, *, tarinfo=None, **attrs):
        if not tarinfo:
            tarinfo = tarfile.TarInfo()
            tarinfo.mtime = self.mtime  # Default value
        name = fsdecode(name)
        tarinfo.name = "{}/{}".format(self.pkgname, name)
        for (key, value) in attrs.items():
            setattr(tarinfo, key, value)
        hash = sha256()
        self.tar.addfile(tarinfo, HashingReader(fileobj, hash))
        print("{}  {}".format(hash.hexdigest(), name), file=self.sums)
    
    def addosfile(self, name, target=None):
        if not target:
            target = name
        with open(name, "rb", buffering=0) as file:
            # Explicit dummy name to avoid using file name of bytes
            tarinfo = self.tar.gettarinfo(fileobj=file, arcname="")
            self.addfile(target, file, tarinfo=tarinfo,
                uid=0, uname="", gid=0, gname="")

class HashingReader(IOBase):
    def __init__(self, file, hash):
        self.file = file
        self.hash = hash
    
    def read(self, *pos, **kw):
        data = self.file.read(*pos, **kw)
        self.hash.update(data)
        return data

def parseaurinfo(aurinfo):
    parsed = dict((field, list()) for field in ARRAY_FIELDS)
    for line in aurinfo.splitlines():
        (name, value) = line.split(b" = ", 1)
        name = name.decode("ascii", "replace")
        if name in SINGLE_FIELDS + ("pkgver",):
            parsed.setdefault(name, value)
        if name in ARRAY_FIELDS:
            parsed[name].append(value)
    return parsed

def getaurinfo(pkgbuild):
    script = StringIO()
    script.write(r"""\
        set -o errexit -o nounset
        . "$1"
    """)
    line = r"""${{{pacman}+printf '{aur} = %s\n' "${{{pacman}[@]}}"}}"""
    for name in SINGLE_FIELDS + ARRAY_FIELDS:
        print(line.format(pacman=name, aur=name), file=script)
    print(r"""${pkgver+printf 'pkgver = %s\n'
        "${epoch+$epoch:}$pkgver${pkgrel+-$pkgrel}"}""", file=script)
    
    # AUR < 3 looks for singular "depend" field names
    print(line.format(pacman="depends", aur="depend"), file=script)
    
    # AUR 3.2.0 gives the infamous "only lowercase letters are allowed" error
    # if the "pkgbase" entry is omitted
    script.write(r"""\
        if test -n "${pkgbase+set}" -o -n "${pkgname+set}"; then
            printf "pkgbase = %s\n" "${pkgbase-${pkgname[0]}}"
        fi
    """)
    
    script = script.getvalue()
    proc = ("bash", "-c", script, "--", pkgbuild)
    return subprocess.Popen(proc, stdin=subprocess.DEVNULL,
        stdout=subprocess.PIPE)

FILE_FIELDS = ("install", "changelog")  # Used internally, but not by AUR
SINGLE_FIELDS = (
    "pkgname", "epoch", "pkgrel", "pkgdesc", "url", "license") + FILE_FIELDS
ARRAY_FIELDS = ("depends", "source")

if __name__ == "__main__":
    main()
