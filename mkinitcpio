#! /usr/bin/env python3
"""
Arch Linux mkinitcpio command without using chroot to allow for cross-
installation of 64-bit OS from 32-bit-only environment.

Requirements:

bash: parse mkinitcpio preset file
"""

import sys
import os
import subprocess
import struct
from os.path import isabs
import os.path

def main():
    from argparse import ArgumentParser
    from inspect import getdoc
    (summary, body) = splitdoc(getdoc(sys.modules[__name__]))
    params = ArgumentParser(description=summary, epilog=body)
    params.add_argument("basedir")
    params.add_argument("-p", "--preset", required=True)
    args = params.parse_args()

def preset_kver(basedir, preset):
    if not {os.sep, os.altsep}.intersection(preset):  # No explicit path
        preset = os.path.join(basedir, "etc", "mkinitcpio.d",
            preset + ".preset")
    
    script = r"""\
        set -o errexit -o nounset
        BASEDIR="$2"
        . source-transplant.sh
        . "$1"
        printf '%s' "$ALL_kver"
    """
    cmd = ("bash", "-c", script, "--", preset, basedir)
    print("bash", preset, file=sys.stderr)
    try:
        kver = subprocess.check_output(cmd, universal_newlines=True)
    except subprocess.CalledProcessError as e:
        raise SystemExit(e.returncode)
    print("kver", kver, file=sys.stderr)
    
    if isabs(kver):
        # Extract version from boot image; based on
        # https://github.com/glensc/file/blob/master/magic/Magdir/linux
        vmlinuz = os.path.join(basedir, kver.lstrip("/"))
        print("extract version", vmlinuz, file=sys.stderr)
        with open(vmlinuz, "rb") as file:
            if random_read(file, 514, 4) != b"HdrS":
                msg = "Unrecognised Linux boot image: {}".format(vmlinuz)
                raise ValueError(msg)
            
            (value,) = struct.unpack("<H", random_read(file, 510, 2))
            if value != 0xAA55:
                msg = "Unrecognised Linux boot image: {}".format(vmlinuz)
                raise ValueError(msg)
            
            (value,) = struct.unpack("<H", random_read(file, 518, 2))
            if value < 0x200:
                msg = "Unrecognised Linux boot image: {}".format(vmlinuz)
                raise ValueError(msg)
            
            (offset,) = struct.unpack("<H", random_read(file, 526, 2))
            file.seek(0x200 + offset)
            kver = bytearray()
            while True:
                c = file.read(1)
                if not c:
                    msg = "Unterminated version string in {}"
                    raise ValueError(msg.format(vmlinuz))
                if c in b"\0 ":
                    break
                kver.extend(c)
        kver = kver.decode()
        print("kver", kver, file=sys.stderr)
    
    return kver

def splitdoc(doc):
    return doc.split("\n\n", 1)

def random_read(file, offset, size):
    file.seek(offset)
    return file.read(size)

if __name__ == "__main__":
    main()
