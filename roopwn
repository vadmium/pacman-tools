#! /usr/bin/env python3

from sys import argv
from subprocess import (check_call, Popen, CalledProcessError)
import subprocess
from sys import stderr
from posixpath import basename
from os import path
import tarfile
from os import (fsdecode, fsencode)
from stat import (S_IXUSR, S_IXGRP, S_IXOTH)
from os.path import splitext
from lib import strip
from lib import Record
from shutil import copyfileobj
from gzip import GzipFile
from bz2 import BZ2File
from tempfile import TemporaryDirectory
from deps import (Deps, Filesystem, OsFilesystem, is_privileged, LibCache)
from functools import partial
from os.path import exists
from lib import Cleanup
from errno import (EINVAL, ENOENT, ENOTDIR)
from os import (strerror, stat)
from signal import (signal, SIGINT, SIGQUIT, SIG_IGN)
from collections import defaultdict

try:
    from lzma import LZMAFile
except ImportError:
    from contextlib import contextmanager
    @contextmanager
    def LZMAFile(filename):
        with Popen("xz --decompress --stdout --".split() + [filename],
        stdout=subprocess.PIPE) as xz:
            yield xz.stdout

CACHEDIR = b"/var/cache/pacman/pkg"

def main():
    through = list()
    sync = []
    upgrade = []
    refresh = []
    xaction_args = list()
    dryrun = False
    
    args = iter(argv[1:])
    for arg in args:
        while True:
            strung = arg.startswith("-") and arg[1] != "-" and len(arg) > 2
            if strung:
                opt = arg[:1 + 1]
            else:
                opt = arg
            
            if opt in ("-S", "--sync"):
                sync.append(opt)
            elif opt in ("-U", "--upgrade"):
                upgrade.append(opt)
            elif opt in ("-y", "--refresh"):
                refresh.append(opt)
            elif opt in (
                "--needed", "--asdeps", "--asexplicit", "--noscriptlet",
                "-d", "--nodeps", "--noprogressbar", "-f", "--force",
                "--recursive", "--noconfirm",
            ):
                xaction_args.append(opt)
            elif opt == "-n":
                dryrun = True
            else:
                through.append(arg)
                through.extend(args)
                break
            
            if strung:
                arg = "-" + arg[1 + 1:]
            else:
                break
    
    if upgrade:
        pkgs = through
    else:
        pacman = ["pacman"] + sync + refresh + xaction_args
        command(pacman + ["--downloadonly"] + through)
        
        pkgs = list()
        pacman = ["pacman"] + sync + xaction_args + ["--print"] + through
        with command_pipe(pacman, stdout=subprocess.PIPE) as pacman:
            for pkg in pacman.stdout:
                (pkg,) = pkg.splitlines()
                pkgs.append(path.join(CACHEDIR, basename(pkg)))
        
        if not pkgs:
            return
    
    anal = Analyser()
    with TemporaryDirectory(prefix="roopwn") as work, Cleanup() as cleanup:
        print("analysing file dependencies...", file=stderr)
        for pkg in pkgs:
            name = decompress(pkg, ".tar", work)
            anal.fs.add(pkg, cleanup(tarfile.open(name)))
        
        touched = set()
        for pkg in pkgs:
            (pkg, _) = pkg_parse(pkg)
            touched.add(fsencode(pkg))
        with Popen("pacman --deptest --".split() + list(touched),
        stdout=subprocess.PIPE, bufsize=-1) as pacman:
            for new in pacman.stdout:
                (new,) = new.splitlines()
                touched.remove(new)
        
        recheck = set()
        if touched:
            pacman = "pacman --query --list --quiet --".split()
            pacman.extend(touched)
            with command_pipe(pacman, stdout=subprocess.PIPE) as pacman:
                for file in pacman.stdout:
                    (file,) = file.splitlines()
                    recheck.update(anal.deps.pop(strip_root(file), ()))
        
        for (filename, entry) in anal.fs.paths.items():
            recheck.discard(filename)
            
            member = entry.member
            if not member.isfile():
                continue
            
            file = entry.tar.extractfile(member)
            
            def guess_needed(deps, needed):
                (dir, so) = path.split(needed.name)
                try:
                    so = so.rsplit(b".so.", 1)[-2]
                except IndexError:
                    return
                so = path.join(dir, so + b".so")
                if needed.search:
                    for match in deps.search_lib(so, anal.cache):
                        anal.fs.owner(match)
                else:
                    if anal.fs.exists(so):
                        anal.fs.owner(so)
            
            anal.analyse(file, filename, member.mode, on_needed=guess_needed)
        
        while recheck:
            dep = recheck.pop()
            try:
                file = anal.fs.open(dep)
            except EnvironmentError:
                continue
            with file:
                if not anal.analyse(file, dep, anal.fs.stat(dep).st_mode):
                    anal.fs.owner(dep)
    
    if anal.fail:
        raise SystemExit(1)
    
    if not dryrun:
        pacman = "pacman --upgrade".split() + xaction_args
        command(pacman + ["--"] + pkgs)
        anal.write_db()

class Analyser(object):
    def __init__(self):
        # A set of dependent ("client") files for each independent
        # ("supplier") file. Some dependent files may no longer actually
        # exist or be dependent, because they are not delisted when their
        # package is touched.
        self.deps = defaultdict(set)
        self.read_db()
        
        self.fs = PackagesFs()
        self.fail = False
        self.cache = LibCache(self.fs)
    
    def analyse(self, file, filename, mode, on_needed=None):
        fail = False
        
        origin = partial(self.fs.get_origin, filename)
        privileged = is_privileged(mode)
        try:
            deps = Deps(file, origin, privileged)
        except ValueError:
            return
        
        for interp in deps.interps():
            if self.fs.exists(interp):
                self.deps[interp].add(filename)
            else:
                print("{}: {}: interp not found".format(
                    fsdecode(filename), fsdecode(interp)), file=stderr)
                fail = True
        
        for needed in deps.needed():
            if needed.search:
                found = deps.search_lib(needed.name, self.cache)
                try:
                    found = next(found)
                except StopIteration:
                    found = None
            else:
                found = needed.name
                if not self.fs.exists(found):
                    found = None
            
            if found is None:
                print("{}: {}: needed not found".format(
                    fsdecode(filename), fsdecode(needed.raw_name)),
                    file=stderr)
                if on_needed:
                    on_needed(deps, needed)
                fail = True
            
            else:
                self.deps[found].add(filename)
        
        if fail:
            self.fail = True
        return not fail
    
    def read_db(self):
        with open(self.DEP_DB, "rb") as db:
            for line in db:
                line = strip(line, end=b"\n")
                try:
                    dep = strip(line, b"  ")
                except ValueError:
                    indep = strip(line, end=b":")
                    deps = self.deps[indep]
                else:
                    deps.add(dep)
    
    def write_db(self):
        with open(self.DEP_DB, "wb") as db:
            for (indep, deps) in self.deps.items():
                db.writelines((indep, b":"))
                for dep in deps:
                    db.writelines((b"\n  ", dep))
                db.write(b"\n")
    
    DEP_DB = "/var/lib/roopwn-deps"

class PackagesFs(Filesystem):
    def __init__(self):
        self.paths = dict()
    
    def add(self, pkg, tar):
        for member in tar:
            filename = strip_root(fsencode(member.name))
            if filename.startswith(b"."):
                continue
            
            if filename in self.paths:
                if member.isdir():
                    continue
                raise ValueError("Duplicate packaged file: {member.name}".
                    format_map(locals()))
            self.paths[filename] = Record(pkg=pkg, tar=tar, member=member)
    
    # TODO: expand links in parent directories before looking up tar file members
    
    def open(self, path):
        try:
            file = self.paths[path]
        except LookupError:
            return OsFilesystem.open(self, path)
        
        file = file.tar.extractfile(file.member)
        if not file:
            raise ErrNoError(EINVAL, path)
        return file
    
    def exists(self, path):
        if path in self.paths:
            return True
        return exists(b"/" + path)
    
    def readlink(self, path):
        try:
            member = self.paths[path].member
        except LookupError:
            return OsFilesystem.readlink(self, path)
        
        if not member.issym():
            raise ErrnoError(EINVAL, path)
        return member.linkname
    
    def listdir(self, path):
        pkg_dir = self.paths.get(path)
        if pkg_dir and not pkg_dir.member.isdir():
            raise ErrNoError(ENOTDIR, path)
        
        res = list()
        prefix = path + b"/"
        for entry in self.paths.keys():
            try:
                entry = strip(entry, prefix)
            except ValueError:
                continue
            
            if b"/" not in entry:
                res.append(entry)
        
        try:
            res.extend(OsFilesystem.listdir(self, path))
        except EnvironmentError as err:
            if err.errno != ENOENT or not pkg_dir:
                raise
        
        return res
    
    def owner(self, path):
        try:
            pkg = self.paths[path].pkg
        except LookupError:
            stderr.write(":: ")
            stderr.flush()
            command("pacman --query --owns --".split() + [b"/" + path])
        else:
            (pkg, ver) = pkg_parse(pkg)
            print(":: {} would be installed by {} {}".format(
                fsdecode(path), fsdecode(pkg), fsdecode(ver)), file=stderr)
    
    def stat(self, path):
        try:
            member = self.paths[path].member
        except LookupError:
            return stat(b"/" + path)
        else:
            return Record(st_mode=member.mode)

def pkg_parse(name):
    PKG = ".pkg."
    DASH = "-"
    if isinstance(name, bytes):
        PKG = fsencode(PKG)
        DASH = fsencode(DASH)
    name = basename(name).rsplit(PKG, 1)[-2]
    (name, ver, rel, _) = name.rsplit(DASH, 3)
    return (name, DASH.join((ver, rel)))

def decompress(file, ext, dir):
    (decomp_file, comp_ext) = splitext(fsdecode(file))
    
    try:
        comp_ext = strip(comp_ext, ".")
    except ValueError:
        return file
    
    try:
        type = comp_types[comp_ext]
    except LookupError:
        return file
    
    decomp_file = basename(decomp_file)
    try:
        ext = type.ext
    except AttributeError:
        (_, ext2) = splitext(decomp_file)
        if ext2 == ext:
            ext = ""
    else:
        ext = "." + ext
    
    decomp_file = path.join(dir, decomp_file + ext)
    
    with type.comp(file) as src:
        with open(decomp_file, "wb") as dest:
            copyfileobj(src, dest)
    
    return decomp_file

comp_types = dict(
    gz=Record(comp=GzipFile), tgz=Record(comp=GzipFile, ext="tar"),
    bz2=Record(comp=BZ2File), tbz=Record(comp=BZ2File, ext="tar"),
    lzma=Record(comp=LZMAFile),
    xz=Record(comp=LZMAFile), txz=Record(comp=LZMAFile, ext="tar"),
)

def command(proc_args, *popen_args, trace=False, **kw):
    """
    Similar to Posix's system() function. It should ignore interrupt and quit
    signals that would normally also be sent to the child process
    """
    
    if trace:
        command_trace(proc_args)
    
    try:
        with IgnoreSigs() as sigs:
            check_call(proc_args, *popen_args, preexec_fn=sigs.__exit__,
                **kw)
    except CalledProcessError as e:
        if trace:
            raise SystemExit(e)
        else:
            raise SystemExit(e.returncode)

class IgnoreSigs(object):
    # Sounds like a recipe for a race condition, but there doesn't seem to be
    # a way to avoid it. Gnu C library:
    # http://sourceware.org/git?p=glibc.git;a=blob;f=sysdeps/posix/system.c
    
    def __enter__(self):
        self.int = None
        self.quit = None
        try:
            self.int = signal(SIGINT, SIG_IGN)
            self.quit = signal(SIGQUIT, SIG_IGN)
            return self
        except:
            self.__exit__()
            raise
    
    def __exit__(self, *args, **kw):
        if self.int is not None:
            signal(SIGINT, self.int)
        if self.quit is not None:
            signal(SIGQUIT, self.quit)

class command_pipe(Popen):
    def __init__(self,
    proc_args, *popen_args, bufsize=-1, trace=False, **kw):
        self.trace = trace
        if self.trace:
            self.arg0 = proc_args[0]
            command_trace(proc_args)
        
        Popen.__init__(self, proc_args, *popen_args, bufsize=bufsize, **kw)
    
    def wait(self, *args, **kw):
        returncode = Popen.wait(self, *args, **kw)
        if returncode:
            if self.trace:
                raise SystemExit("Command {self.arg0!r} failed "
                    "with exit status {returncode}".format_map(locals()))
            else:
                raise SystemExit(returncode)
        return returncode

def command_trace(args):
    print("+", " ".join(args), file=stderr)

def ErrNoError(errno, *args, **kw):
    return EnvironmentError(errno, strerror(errno), *args, **kw)

def strip_root(path):
    start = 0
    while True:
        for prefix in (b"/", b"./", b"../"):
            if path.startswith(prefix, start):
                start += len(prefix)
                break
        else:
            return path[start:]

if __name__ == "__main__":
    main()
