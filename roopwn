#! /usr/bin/env python3

from sys import argv
from subprocess import (check_call, Popen, CalledProcessError)
import subprocess
from sys import stderr
from posixpath import basename
from os import path
import tarfile
from os import (fsdecode, fsencode)
from stat import (S_IXUSR, S_IXGRP, S_IXOTH)
from os.path import splitext
from shorthand import strip
from shorthand import SimpleNamespace
from shutil import copyfileobj
from gzip import GzipFile
from bz2 import BZ2File
from tempfile import TemporaryDirectory
from deps import (Deps, Filesystem, OsFilesystem, is_privileged, LibCache)
from functools import partial
from os.path import exists
from errno import (EINVAL, ENOENT, ENOTDIR)
from os import (strerror, stat)
from signal import (signal, SIGINT, SIGQUIT, SIG_IGN)
from collections import defaultdict
from os import devnull
from operator import itemgetter
from os import execvp
from lzma import LZMAFile

CACHEDIR = b"/var/cache/pacman/pkg"

def main():
    through = list()
    sync = []
    upgrade = []
    remove = []
    refresh = []
    xaction_args = list()
    dryrun = False
    filedeps = True
    verbose = False
    help = False
    pacman = "pacman"
    
    args = iter(argv[1:])
    for arg in args:
        while True:
            strung = arg.startswith("-") and arg[1] != "-" and len(arg) > 2
            if strung:
                opt = arg[:1 + 1]
            else:
                opt = arg
            
            if opt in ("-S", "--sync"):
                sync.append(opt)
            elif opt in ("-U", "--upgrade"):
                upgrade.append(opt)
            elif opt in ("-R", "--remove"):
                remove.append(opt)
            elif opt in ("-y", "--refresh"):
                refresh.append(opt)
            elif opt in (
                "--needed", "--asdeps", "--asexplicit", "--noscriptlet",
                "-d", "--nodeps", "--noprogressbar", "-f", "--force",
                "--recursive", "--noconfirm", "-c", "--cascade",
                "-n", "--nosave", "-s", "-u", "--unneeded",
            ):
                xaction_args.append(opt)
            elif opt == "--dryrun":
                dryrun = True
            elif opt == "--nofiledeps":
                filedeps = False
            elif opt in ("-v", "--verbose"):
                verbose = True
            elif opt in ("-h", "--help"):
                help = True
            elif opt == "--pacman":
                pacman = next(args)
            else:
                through.append(arg)
                if opt.startswith("-"):
                    through.extend(args)
                    break
            
            if strung:
                arg = "-" + arg[1 + 1:]
            else:
                break
    
    if help:
        print("""\
Parameters: <operation> [options . . .] [Pacman arguments . . .]
Operations handled natively: -S --sync -U --upgrade -R --remove
Other operations are passed to Pacman.
Options handled natively:
    --nofiledeps
    --dryrun
    -v --verbose
    -h --help
    --pacman: Specify command to run for Pacman
Options passed to Pacman:
    -y --refresh
    --needed -s --recursive -u --unneeded
    -c --cascade
    --asdeps --asexplicit
    --noscriptlet -d --nodeps -f --force
    --noprogressbar --noconfirm
    -n --nosave""",
        file=stderr)
        return
    
    if not sync and not upgrade and not remove:
        proc = [pacman] + refresh + xaction_args + through
        if verbose:
            command_trace(proc)
        execvp(pacman, proc)
    
    if upgrade:
        pkg_files = through
    
    if sync:
        proc = [pacman] + sync + refresh + xaction_args
        command(proc + ["--downloadonly"] + through, trace=verbose)
        
        pkg_files = list()
        proc = [pacman] + sync + xaction_args + ["--print"] + through
        with command_pipe(proc, stdout=subprocess.PIPE,
        trace=verbose) as proc:
            for pkg in proc.stdout:
                (pkg,) = pkg.splitlines()
                pkg_files.append(path.join(CACHEDIR, basename(pkg)))
        
        if not pkg_files:
            return
    
    if remove:
        proc = ([pacman] + remove + refresh + xaction_args + ["--print"] +
            through)
        with command_pipe(proc, stdout=subprocess.PIPE, check=False,
        trace=verbose) as proc:
            stdout = proc.stdout.read()
        
        # Pacman prints messages to stdout, as well as package names!
        if proc.returncode or b" " in stdout:
            stderr.buffer.write(stdout)
            raise SystemExit(proc.returncode)
        
        pkg_names = list()
        for pkg in stdout.splitlines():
            (pkg, _) = pkg_parse(pkg)
            pkg_names.append(pkg)
    
    anal = Analyser()
    with ExitStack() as cleanup:
        print("analysing file dependencies...", file=stderr)
        
        if not remove:
            work = cleanup.enter_context(TemporaryDirectory(prefix="roopwn"))
            
            if verbose:
                print("extracting packages...", file=stderr)
            pkg_names = list()
            for pkg in pkg_files:
                tar = tarfile.open(decompress(pkg, ".tar", work))
                cleanup.enter_context(tar)
                
                PKG = ".pkg."
                DASH = "-"
                if isinstance(pkg, bytes):
                    PKG = fsencode(PKG)
                    DASH = fsencode(DASH)
                pkg = basename(pkg).rsplit(PKG, 1)[-2].rsplit(DASH, 1)[0]
                (name, _) = pkg_parse(pkg)
                pkg_names.append(name)
                
                if not anal.fs.add(pkg, tar):
                    anal.fail = True
        
        # Get list of files which may be removed
        recheck = set()
        proc = [pacman] + "--query --list --quiet --".split() + pkg_names
        with command_pipe(proc, stdout=subprocess.PIPE,
        stderr=command_pipe.NULL, check=False, trace=verbose) as proc:
            for file in proc.stdout:
                (file,) = file.splitlines()
                recheck.update(anal.deps.pop(strip_root(file), ()))
        
        if not remove:
            if verbose:
                print("searching for new dependencies...", file=stderr)
            
            if filedeps:
                def on_needed(deps, needed):
                    (dir, so) = path.split(needed["name"])
                    try:
                        so = so.rsplit(b".so.", 1)[-2]
                    except IndexError:
                        return
                    so = path.join(dir, so + b".so")
                    if needed["search"]:
                        for match in deps.search_lib(so, anal.cache):
                            anal.fs.owner(match)
                    else:
                        if anal.fs.exists(so):
                            anal.fs.owner(so)
            else:
                on_needed = None
            
            for (filename, entry) in anal.fs.paths.items():
                recheck.discard(filename)
                
                member = entry["member"]
                if not member.isfile():
                    continue
                
                file = entry["tar"].extractfile(member)
                anal.analyse(file, filename, member.mode,
                    on_needed=on_needed)
        
        if verbose:
            print("updating old dependencies...", file=stderr)
        while recheck:
            dep = recheck.pop()
            try:
                file = anal.fs.open(dep)
            except EnvironmentError:
                continue
            with file:
                fail = not anal.analyse(file, dep, anal.fs.stat(dep).st_mode)
            if fail and filedeps:
                anal.fs.owner(dep)
    
    if filedeps and anal.fail:
        raise SystemExit(1)
    
    if not dryrun:
        if remove:
            proc = [pacman] + remove + xaction_args + ["--"] + pkg_names
            command(proc, trace=verbose)
        else:
            proc = [pacman, "--upgrade"]
            if sync:
                proc.append("--noconfirm")
            command(proc + xaction_args + ["--"] + pkg_files, trace=verbose)
        anal.write_db()

class Analyser(object):
    def __init__(self):
        # A set of dependent ("client") files for each independent
        # ("supplier") file. Some dependent files may no longer actually
        # exist or be dependent, because they are not delisted when their
        # package is touched.
        self.deps = defaultdict(set)
        self.read_db()
        
        self.fs = PackagesFs()
        self.fail = False
        self.cache = LibCache(self.fs)
    
    def analyse(self, file, filename, mode, on_needed=None):
        fail = False
        
        origin = partial(self.fs.get_origin, filename)
        privileged = is_privileged(mode)
        try:
            deps = Deps(file, origin, privileged)
        except (ValueError, LookupError):
            return
        
        for interp in deps.interps():
            if self.fs.exists(interp):
                self.deps[interp].add(filename)
            else:
                print("{}: {}: interp not found".format(
                    fsdecode(filename), fsdecode(interp)), file=stderr)
                fail = True
        
        for needed in deps.needed():
            if needed["search"]:
                found = deps.search_lib(needed["name"], self.cache)
                found = next(found, None)
            else:
                found = needed["name"]
                if not self.fs.exists(found):
                    found = None
            
            if found is None:
                print("{}: {}: needed not found".format(
                    fsdecode(filename), fsdecode(needed["raw_name"])),
                    file=stderr)
                if on_needed:
                    on_needed(deps, needed)
                fail = True
            
            else:
                self.deps[found].add(filename)
        
        if fail:
            self.fail = True
        return not fail
    
    def read_db(self):
        with open(self.DEP_DB, "rb") as db:
            for line in db:
                line = strip(line, end=b"\n")
                try:
                    dep = strip(line, b"  ")
                except ValueError:
                    indep = strip(line, end=b":")
                    deps = self.deps[indep]
                else:
                    deps.add(dep)
    
    def write_db(self):
        with open(self.DEP_DB, "wb") as db:
            for (indep, deps) in sorted(self.deps.items(), key=itemgetter(0)):
                db.writelines((indep, b":"))
                for dep in deps:
                    db.writelines((b"\n  ", dep))
                db.write(b"\n")
    
    DEP_DB = "/var/lib/roopwn-deps"

class PackagesFs(Filesystem):
    def __init__(self):
        self.paths = dict()
    
    def add(self, pkg, tar):
        success = True
        for member in tar:
            filename = strip_root(fsencode(member.name))
            if filename.startswith(b"."):
                continue
            
            if filename in self.paths:
                if member.isdir():
                    continue
                
                (old, _) = pkg_parse(self.paths[filename]["pkg"])
                (new, _) = pkg_parse(pkg)
                print(fsdecode(new), "duplicates", member.name, "from",
                    fsdecode(old), file=stderr)
                success = False
            
            self.paths[filename] = dict(pkg=pkg, tar=tar, member=member)
        
        return success
    
    # TODO: expand links in parent directories before looking up tar file members
    
    def open(self, path):
        try:
            file = self.paths[path]
        except LookupError:
            return OsFilesystem.open(self, path)
        
        file = file["tar"].extractfile(file["member"])
        if not file:
            raise ErrNoError(EINVAL, path)
        return file
    
    def exists(self, path):
        if path in self.paths:
            return True
        return exists(b"/" + path)
    
    def readlink(self, path):
        try:
            file = self.paths[path]
        except LookupError:
            return OsFilesystem.readlink(self, path)
        
        member = file["member"]
        if not member.issym():
            raise ErrnoError(EINVAL, path)
        return member.linkname
    
    def listdir(self, path):
        pkg_dir = self.paths.get(path)
        if pkg_dir and not pkg_dir["member"].isdir():
            raise ErrNoError(ENOTDIR, path)
        
        res = list()
        prefix = path + b"/"
        for entry in self.paths.keys():
            try:
                entry = strip(entry, prefix)
            except ValueError:
                continue
            
            if b"/" not in entry:
                res.append(entry)
        
        try:
            res.extend(OsFilesystem.listdir(self, path))
        except EnvironmentError as err:
            if err.errno != ENOENT or not pkg_dir:
                raise
        
        return res
    
    def owner(self, path):
        try:
            file = self.paths[path]
        except LookupError:
            stderr.write(":: ")
            stderr.flush()
            command([pacman] + "--query --owns --".split() + [b"/" + path])
        else:
            (pkg, ver) = pkg_parse(file["pkg"])
            print(":: {} would be installed by {} {}".format(
                fsdecode(path), fsdecode(pkg), fsdecode(ver)), file=stderr)
    
    def stat(self, path):
        try:
            file = self.paths[path]
        except LookupError:
            return stat(b"/" + path)
        else:
            return SimpleNamespace(st_mode=file["member"].mode)

def pkg_parse(name):
    DASH = "-"
    if isinstance(name, bytes):
        DASH = fsencode(DASH)
    (name, ver, rel) = name.rsplit(DASH, 2)
    return (name, DASH.join((ver, rel)))

def decompress(file, ext, dir):
    (decomp_file, comp_ext) = splitext(fsdecode(file))
    
    try:
        comp_ext = strip(comp_ext, ".")
    except ValueError:
        return file
    
    try:
        type = comp_types[comp_ext]
    except LookupError:
        return file
    
    decomp_file = basename(decomp_file)
    try:
        ext = type["ext"]
    except LookupError:
        (_, ext2) = splitext(decomp_file)
        if ext2 == ext:
            ext = ""
    else:
        ext = "." + ext
    
    decomp_file = path.join(dir, decomp_file + ext)
    
    with type["comp"](file) as src:
        with open(decomp_file, "wb") as dest:
            copyfileobj(src, dest)
    
    return decomp_file

comp_types = dict(
    gz=dict(comp=GzipFile), tgz=dict(comp=GzipFile, ext="tar"),
    bz2=dict(comp=BZ2File), tbz=dict(comp=BZ2File, ext="tar"),
    lzma=dict(comp=LZMAFile),
    xz=dict(comp=LZMAFile), txz=dict(comp=LZMAFile, ext="tar"),
)

def command(proc_args, *popen_args, trace=False, **kw):
    """
    Similar to Posix's system() function. It should ignore interrupt and quit
    signals that would normally also be sent to the child process
    """
    
    if trace:
        command_trace(proc_args)
    
    try:
        with IgnoreSigs() as sigs:
            check_call(proc_args, *popen_args, preexec_fn=sigs.__exit__,
                **kw)
    except CalledProcessError as e:
        if trace:
            print(e, file=stderr)
        raise SystemExit(e.returncode)

class IgnoreSigs(object):
    # Sounds like a recipe for a race condition, but there doesn't seem to be
    # a way to avoid it. Gnu C library:
    # http://sourceware.org/git?p=glibc.git;a=blob;f=sysdeps/posix/system.c
    
    def __enter__(self):
        self.int = None
        self.quit = None
        try:
            self.int = signal(SIGINT, SIG_IGN)
            self.quit = signal(SIGQUIT, SIG_IGN)
            return self
        except:
            self.__exit__()
            raise
    
    def __exit__(self, *args, **kw):
        if self.int is not None:
            signal(SIGINT, self.int)
        if self.quit is not None:
            signal(SIGQUIT, self.quit)

class command_pipe(Popen):
    def __init__(self,
    proc_args, *popen_args,
    bufsize=-1, stderr=None, trace=False, check=True, **kw):
        self.trace = trace
        self.check = check
        
        if stderr is self.NULL:
            null = open(devnull, "w")
        else:
            null = None
        
        try:
            if stderr is self.NULL:
                stderr = null
            
            if self.trace:
                self.arg0 = proc_args[0]
                command_trace(proc_args)
            
            Popen.__init__(self,
                proc_args, *popen_args,
                bufsize=bufsize, stderr=stderr, **kw)
        
        finally:
            if null:
                null.close()
    
    def wait(self, *args, **kw):
        returncode = Popen.wait(self, *args, **kw)
        if self.check and returncode:
            if self.trace:
                print("Command", repr(self.arg0),
                    "failed with exit status", returncode, file=stderr)
            raise SystemExit(returncode)
        return returncode
    
    NULL = object()

def command_trace(args):
    print("+", " ".join(fsdecode(arg) for arg in args), file=stderr)

def ErrNoError(errno, *args, **kw):
    return EnvironmentError(errno, strerror(errno), *args, **kw)

def strip_root(path):
    start = 0
    while True:
        for prefix in (b"/", b"./", b"../"):
            if path.startswith(prefix, start):
                start += len(prefix)
                break
        else:
            return path[start:]

if __name__ == "__main__":
    main()
