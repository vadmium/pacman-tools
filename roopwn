#! /bin/sh

CACHEDIR=/var/cache/pacman/pkg

main() {
    shell_init
    local refresh sync upgrade
    while test "$#" -gt 0; do
        local opt="$1" next
        case "$opt" in
        -[^-]?*)
            next="${opt#-?}"
            opt="${opt%"$next"}"
            ;;
        *)
            unset next
            ;;
        esac
        
        case "$opt" in
        -S | --sync)
            sync="$opt"
            ;;
        -y | --refresh)
            refresh="$opt"
            ;;
        -U | --upgrade)
            upgrade="$opt"
            ;;
        *)
            break
            ;;
        esac
        
        shift
        set -- ${next+-"$next"} "$@"
    done
    
    local pkg
    if test -n "${upgrade+set}"; then
        pkg="$@"
    else
        pacman ${sync+"$sync"} ${refresh+"$refresh"} --downloadonly "$@"
        
        pkg="$CACHEDIR/$(basename -- "$(
            pacman ${sync+"$sync"} --print "$@")")"
    fi
    
    unset WORK
    trap onexit EXIT
    WORK="$(mktemp --tmpdir --directory roopwn.XXXXXXXXXX)"
    echo >&2 "Analysing:" "$pkg"
    local files file deps missing fail
    files="$(tar xvf "$pkg" -C "$WORK" --exclude ".*" --anchored)"
    while read -r file; do
        workfile="$WORK/$file"
        if ! {
            test -x "$workfile" &&
            deps="$(ldd -- "$workfile" 2> /dev/null)"
        } then
            continue
        fi
        if missing="$(
            grep ' => not found$' << INPUT
$deps
INPUT
        )"; then
            echo >&2 "$file:"
            echo >&2 "$missing"
            fail=set
        fi
    done << INPUT
$files
INPUT
    rm -rf -- "$WORK"
    unset WORK
    
    if test -n "${fail-}"; then
        return 1
    fi
    
    pacman --upgrade "$pkg"
}

onexit() {
    if test -n "${WORK+set}"; then
        rm -rf -- "$WORK"
    fi
}

shell_init() {
    set -o errexit -o nounset
}

main "$@"

<< 'PYTHON'
#! /usr/bin/env python3

from sys import argv
from subprocess import check_call

def main():
    through = list()
    refresh = []
    args = iter(argv[1:])
    for arg in args:
        through.append(arg)  # By default
        if arg == "--":
            through.extend(args)
            break
        if arg.startswith("--"):
            if arg == "--refresh":
                through.pop()
                refresh = [arg]
        elif arg.startswith("-"):
            for c in arg[1:]:
                if c == y
    check_call("pacman --downloadonly".split() + refresh + args)
    
    for arg in args:
        if not arg.startswith("-"):
            continue
        
        if arg == "--refresh":
            continue

if __name__ == "__main__":
    main()
PYTHON
