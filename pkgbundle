#! /bin/sh

# Arch Linux installation without using chroot or executing target programs
# to allow for cross-installation of 64-bit OS from 32-bit-only environment.

# Requirements:
# tar,sed,grep,comm,sort,uniq,mktemp,sh
# xz-utils: Needed for xz packages,
#     along with a version of "tar" that automatically recognises them
#     (Gnu "tar" 1.20 doesn't; version 1.26 does)
# Optional:
# wget: online
# uname: architecture default detection
# cpio: building bundle
# sudo: installing root filesystem alternative
# sudo: cache access alternative
# bash: makepkg
# fakeroot: building bundle alternative

# TODO:
# Try cpio instead of tar, and pax instead of both; configurable or automatically tried
# check remote server for newer versions of files (eg package database)
# cross makepkg? otherwise, only really build "any" arch packages
# Run a script or allow editing of the filesystem before creating a bundle

SUDO="sudo -E --"
WGET="wget"
#WGET="wget --no-verbose"
PACMAN_VER=v3.5.3
MAKEPKG_IN="https://projects.archlinux.org/pacman.git/plain"
MAKEPKG_IN="$MAKEPKG_IN/scripts/makepkg.sh.in?id=$PACMAN_VER"

main() {
    shell_init
    get_options "$@"
    
    : "${CONFIG=/etc/pacman.conf}"
    : "${CX=}"
    
    if test -n "${DESTDIR+set}"; then
        : "${FSX=}"
    else
        : "${FSX=fakeroot --}"
    fi
    
    get_pacman_conf
    
    : "${DBPATH=.}" "${CACHEDIR=pkg}"
    
    if test -z "${arch+set}"; then
        arch="$(uname -m)"
    fi
    
    unset LOCK SCRATCH FS
    trap onexit EXIT
    SCRATCH="$(mktemp --tmpdir --directory pkgb.XXXXXXXXXX)"
    
    total=0
    if test -n "${BUILD+set}"; then
        build_packages
    fi
    if test -n "${INSTALL:+set}"; then
        get_packages
    fi
    
    NPKGS="$(printf '%s\n' "$pkgs" | wc -l)"
    echo >&2 "Number of packages: $NPKGS"
    echo >&2 "Bytes to be installed (from repositories): $total"
    
    if test -z "${OFFLINE+set}" -a -n "${dl+set}"; then
        unset IFS
        printf '%s\n' "$dl" |
        $CX $WGET -c --directory-prefix="$CACHEDIR" -i -
    fi
    
    stage
}

onexit() {
    unset IFS
    echo >&2 "cleaning up"
    if test -n "${LOCK+set}"; then
        $CX rm -- "$LOCK"
    fi
    if test -n "${SCRATCH+set}"; then
        rm -rf -- "$SCRATCH"
    fi
    if test -n "${FS+set}"; then
        if test -z "${DESTDIR+set}"; then
            $FSX rm -rf -- "$FS"
        else
            $FSX rm -f -- "$FS/.PKGINFO" "$FS/.INSTALL"
        fi
    fi
}

get_options() {
    while test "$#" -gt 0; do
        case "$1" in
        fs)
            DESTDIR="$2"
            shift 2;;
        bundle)
            BUNDLE="$2"
            shift 2;;
        fs-axx)
            FSX="$2"
            shift 2;;
        fs-sudo)
            FSX="$SUDO"
            shift;;
        repo)
            for repo in $2; do
                REPOS="${REPOS+$REPOS$NL}$repo"
            done
            shift 2;;
        config)
            CONFIG="$2"
            shift 2;;
        cache-axx)
            CX="$2"
            shift 2;;
        cache-sudo)
            CX="$SUDO"
            shift;;
        install)
            IFS="$WS,"
            INSTALL="${INSTALL+$INSTALL$NL}$(printf '%s\n' $2)"
            shift 2;;
        build)
            IFS="$WS,"
            BUILD="${BUILD+$BUILD$NL}$(printf '%s\n' $2)"
            shift 2;;
        arch)
            arch="$2"
            shift 2;;
        enable)
            IFS="$WS,"
            ENABLE="${ENABLE+$ENABLE$NL}$(printf '%s\n' $2)"
            shift 2;;
        disable)
            IFS="$WS,"
            DISABLE="${DISABLE+$DISABLE$NL}$(printf '%s\n' $2)"
            shift 2;;
        offline)
            OFFLINE=set
            shift 1;;
        help)
            usage
            exit 0
            shift 1;;
        *)
            echo "Bad option: $1 (Try \"help\")" >&2
            false
            shift 1;;
        esac
    done
    
    if test -z "${INSTALL+set}" -a -z "${BUILD+set}"; then
        echo >&2 "No packages specified (Try \"help\")"
        false
    fi
}

usage() {
cat << USAGE
Options:
fs <dir>
${TAB}Target file system to install to. Default: ./stage, deleted when
${TAB}finished
bundle <cpio.gz>
fs-axx <command>
${TAB}Default: "fakeroot --" if staged
fs-sudo${TAB}Access target filesystem with "$SUDO"
repo <url>
${TAB}Multiple repositories separated by whitespace or provided in multiple
${TAB}arguments. Repositories are additional to those from pacman.conf.
${TAB}Example:
${TAB}http://mirrors.kernel.org/archlinux/core/os/\$arch/core.db
${TAB}The \$arch variable will be substituted automatically.
config${TAB}Default: /etc/pacman.conf in host file system. (Target not used
${TAB}by default.)
cache-axx <command>
${TAB}Default: nothing
cache-sudo
${TAB}Access package database and cache sudo "$SUDO"
install <package>,<package>,. . .
${TAB}Install packages and dependencies from specified repositories.
${TAB}Example: base
build <PKGBUILD>,<PKGBUILD>
${TAB}PKGBUILD or directory containing one
arch <arch>
${TAB}Default: uname -m
enable <repo>,<repo>,. . .
${TAB}Suggested: core
disable <repo>,<repo>,. . .
${TAB}Recommended: testing
offline
help
USAGE
}

get_pacman_conf() {
    if test -n "${arch+set}"; then
        # Don't use Pacman's database if we override the architecture
        : "${DBPATH=.}"
    fi
    
    if test -e "$CONFIG"; then
        unset line
        
        while test -n "${line+set}" || read -r line; do
            case "$line" in
            '[options]')
                while ini_line; do
                    case "$key" in
                    RootDir)
                        if test -z "${BUNDLE+set}"; then
                            : "${DESTDIR="$value"}"
                        fi;;
                    DBPath)
                        : "${DBPATH="$value"}";;
                    CacheDir)
                        : "${CACHEDIR="$value"}";;
                    Architecture)
                        if test "$value" != auto; then
                            : "${arch="$value"}"
                        fi;;
                    esac
                done;;
            
            '['*']')
                repo="${line#'['}"
                repo="${repo%']'}"
                if {
                    test -n "${ENABLE+set}" &&
                    ! printf '%s\n' "$ENABLE" | grep -qFx -- "$repo"
                } || {
                    test -n "${DISABLE+set}" &&
                    printf '%s\n' "$DISABLE" | grep -qFx -- "$repo"
                } then
                    unset line
                    continue
                fi
                
                unset server
                while ini_line; do
                    case "$key" in
                    Include)
                        while ini_line; do
                            if test "$key" = Server; then
                                : "${server="$value"}"
                            fi
                        done < "$value";;
                    Server)
                        : "${server="$value"}";;
                    esac
                done
                
                server="$(printf '%s/$repo.db\n' "$server" |
                    sed s/'$repo'/"$repo"/g)"
                REPOS="${REPOS+$REPOS$NL}$server";;
            
            *)
                unset line;;
            esac
        done < "$CONFIG"
        
        : "${DBPATH=/var/lib/pacman}" "${CACHEDIR=/var/cache/pacman/pkg}"
    fi
}

ini_line() {
    unset line
    while read -r line; do
        case "$line" in
        '['*']')
            return 1;;
        '#'* | '')
            continue;;
        esac
        
        key="$(printf '%s\n' "$line" | sed 's/[ \t\n]*=.*$//')"
        value="$(printf '%s\n' "$line" | sed 's/^[^=]*=\?[ \t\n]*//')"
        return 0
    done
    return 1
}

build_packages() {
    get_makepkg
    
    IFS="$NL"
    for build in "$BUILD"; do
        if test -d "$build"; then
            build="$build/PKGBUILD"
        fi
        dir="${build%/*}"
        
        # Closing $() bracket must be after heredoc or Bash gets confused
        pkg="$dir/$(build="$build" CARCH="$arch" \
            bash -o errexit -o nounset << 'BASH'
            source "$build"
            for arch in "${arch[@]-}"; do
                if test "$arch" = any; then
                    break
                fi
            done
            if test "$arch" != any; then
                arch="$CARCH"
            fi
            printf '%s\n' "$pkgname-$pkgver-$pkgrel-$arch.pkg.tar.xz"
BASH
        )"
        
        if test ! -e "$pkg"; then (
            cd -- "$dir"
            PATH="${MAKEPKG_PATH}" \
                $MAKEPKG --ignorearch --rmdeps -p "${build##*/}"
        ) fi
        pkgs="${pkgs+$pkgs$NL}$pkg"
        # TODO: add to $total and get depends from package file instead
        INSTALL="${INSTALL+$INSTALL$NL}$(
            build="$build" bash -o errexit -o nounset << 'BASH'
            source "$build"
            printf '%s\n' "${depends[@]-}"
BASH
        )"
    done
}

get_makepkg() {
    if MAKEPKG="$(command -v makepkg)"; then
        MAKEPKG_PATH="$PATH"
        return
    fi
    
    if test ! -x makepkg; then
        $WGET -c -- "$MAKEPKG_IN"
        MAKEPKG_IN="${MAKEPKG_IN##*/}"
        sed -f - << SED -- "$MAKEPKG_IN" > makepkg
            s|@BASH_SHELL[@]|/bin/bash|g
            s|@configure_input[@]|Generated from $MAKEPKG_IN by pkgbundle|g
            s|@localedir[@]|/dev/null|g
            s|@PACKAGE_VERSION[@]|$PACMAN_VER|g
            s|@sysconfdir[@]|/dev/null|g
            s|@BUILDSCRIPT[@]|PKGBUILD|g
            s|@DUPATH[@]|du|g
            s|@SEDINPLACE[@]|sed -i|g
SED
        chmod +x makepkg
    fi
    if test ! -e makepkg.conf; then
        cat > makepkg.conf << CONF
            BUILDENV=(fakeroot)
            PKGEXT=".pkg.tar.xz"
CONF
    fi
    if test ! -e bsdtar; then
        ln -s "$(command -v tar)" bsdtar
    fi
    MAKEPKG_PATH="${PATH+$PATH:}$(pwd)"
    MAKEPKG="makepkg$NL--config$NL$(pwd)/makepkg.conf"
}

get_packages() {
    if test -n "${REPOS+set}"; then
        REPOS="$(printf '%s\n' "$REPOS" | sed s/'$arch'/"$arch"/g)"
    fi
    
    unset IFS
    $CX mkdir -p "$DBPATH"
    echo "$$" | LOCK="$DBPATH/db.lck" $CX sh -o noclobber -c 'cat > "$LOCK"'
    LOCK="$DBPATH/db.lck"
    
    $CX mkdir -p "$DBPATH/sync"
    $CX mkdir -p "$CACHEDIR"
    
    if test -z "${OFFLINE+set}" -a -n "${REPOS+set}"; then
        printf '%s\n' "$REPOS" |
        $CX $WGET --timestamping --directory-prefix="$DBPATH/sync" -i -
    fi
    
    resolve_packages
}

resolve_packages() {
    if test -n "${INSTALL+set}"; then printf '%s\n' "$INSTALL"; fi |
    sort -u > "$SCRATCH/search"
    
    IFS="$NL"
    mkdir "$SCRATCH/db"
    for repo in ${REPOS-}; do
        db="${repo##*/}"
        mkdir "$SCRATCH/db/$db"
        echo >&2 "Reading: $db"
        tar xf "$DBPATH/sync/$db" -C "$SCRATCH/db/$db" -k
    done
    
    : > "$SCRATCH/resolved"
    while test -s "$SCRATCH/search"; do
        echo >&2 "Resolving:" $(cat "$SCRATCH/search")
        unset new_deps
        
        IFS="$NL"
        for repo in ${REPOS-}; do
            db="${repo##*/}"
            echo >&2 "  Searching: $db"
            repo="$(printf '%s\n' "$repo" | sed 's:[^/]*$::')"
            
            for pkg in "$SCRATCH/db/$db"/*; do
                unset provs groups deps filename
                size=0
                
                while read -r line; do
                    case "$line" in
                    %FILENAME%)
                        while read -r line && test -n "$line"; do
                            filename="${filename+$filename$NL}$repo$line"
                        done;;
                    %NAME%)
                        while read -r line && test -n "$line"; do
                            provs="${provs+$provs$NL}$line"
                        done;;
                    %GROUPS%)
                        while read -r line && test -n "$line"; do
                            groups="${groups+$groups$NL}$line"
                        done;;
                    %ISIZE%)
                        while read -r line && test -n "$line"; do
                            size="$((size + line))"
                        done;;
                    esac
                done < "$pkg/desc"
                
                if test -e "$pkg/depends"; then
                    while read -r line; do
                        case "$line" in
                        %DEPENDS%)
                            while read -r line && test -n "$line"; do
                                line="${line%%[>=]*}"
                                deps="${deps+$deps$NL}$line"
                            done;;
                        %PROVIDES%)
                            while read -r line && test -n "$line"; do
                                line="${line%%=*}"
                                provs="${provs+$provs$NL}$line"
                            done;;
                        esac
                    done < "$pkg/depends"
                fi
                
                if test -n "${groups+set}"; then
                    ! groups="$(grep -Fx "$groups" "$SCRATCH/search")"
                fi
                if {
                    test -z "${groups-}" &&
                    ! grep -qFx -- "$provs" "$SCRATCH/search"
                } || grep -qFx -- "$provs" "$SCRATCH/resolved"; then
                    continue
                fi
                
                dl="${dl+$dl$NL}$filename"
                if test -n "${deps+set}"; then
                    new_deps="${new_deps+$new_deps$NL}$deps"
                fi
                printf '%s\n' "$provs" >> "$SCRATCH/resolved"
                if test -n "${groups+set}"; then
                    printf '%s\n' "$groups" >> "$SCRATCH/resolved"
                fi
                total="$((total + size))"
            done
        done
        
        sort -u -- "$SCRATCH/resolved" > "$SCRATCH/out"
        mv "$SCRATCH/out" "$SCRATCH/resolved"
        
        unres="$(comm -23 -- "$SCRATCH/search" "$SCRATCH/resolved")"
        if test -n "$unres"; then
            IFS="$NL"
            echo >&2 "Unresolved packages:" $unres
            false
        fi
        
        if test -n "${new_deps+set}"; then printf '%s\n' "$new_deps"; fi |
        sort -u | comm -23 - -- "$SCRATCH/resolved" > "$SCRATCH/search"
    done
    
    if test -n "${dl+set}"; then
        pkgs="${pkgs+$pkgs$NL}$(printf '%s\n' "$dl" |
            sed 's:^.*/':"$CACHEDIR"/:)"
    fi
}

stage() {
    unset IFS
    if test -n "${DESTDIR+set}"; then
        $FSX mkdir -p "${DESTDIR-stage}"
        FS="$DESTDIR"
    else
        $FSX mkdir stage
        FS=stage
    fi
    
    rm -f -- "$SCRATCH/status"
    if test -n "${pkgs+set}"; then printf '%s\n' "$pkgs"; fi | {
    cat << 'SH' > "$SCRATCH/script"
        set -o errexit -o nounset
        
        INSTALL="$FS/var/spool/pkgbundle/install"
        mkdir -p -- "$INSTALL"
        n=0
        while read -r line; do
            n="$((n + 1))"
            echo "$n/$NPKGS Unpacking $line" >&2
            tar xf "$line" --force-local --same-owner --same-permissions \
                -C "$FS" -k
            pkgname="$(sed -n 's/^pkgname = //p' -- "$FS/.PKGINFO")"
            if test -e "$FS/.INSTALL"; then
                mv -- "$FS/.INSTALL" "$INSTALL/$pkgname"
            fi
            rm -- "$FS"/.[A-Z]*
        done
        
        if test -n "$BUNDLE"; then
            echo "Creating $BUNDLE" >&2
            cd -- "$FS"
            find . | cpio -o -H newc
        fi
SH
        
        unset IFS
        FS="$FS" CACHEDIR="$CACHEDIR"  BUNDLE="${BUNDLE-}" NPKGS="$NPKGS" \
            $FSX sh "$SCRATCH/script"
        : > "$SCRATCH/status"
    } | if test -n "${BUNDLE+set}"; then
        gzip -c > "$BUNDLE"
    fi
    test -e "$SCRATCH/status"
    
    if test -n "${DESTDIR+set}"; then
        unset FS
    fi
}

shell_init() {
    set -o errexit -o nounset
NL='
'
    TAB="$(printf '\t')"
    WS=" $TAB$NL"
}

main "$@"
